(* library code *)
import BoolUtils PairUtils ListUtils

library ZEX

(* Hardcoded variables *)
let zero = Uint128 0
let sellOrderCode = Uint32 0
let buyOrderCode = Uint32 1

(* Return message codes *)
let initializedContractCode = Uint32 0
let ownerOnlyCode = Uint32 1
let uninitializedCode = Uint32 2
let orderMadeCode = Uint32 3
let notAcceptingZILCode = Uint32 4
let invalidOrderTypeCode = Uint32 5
let invalidAmountSentCode = Uint32 6
let canOnlyInitializeOnceCode = Uint32 7
let orderFilledCode = Uint32 8

let fstOrder = @fst (Uint128) (Uint128)
let sndOrder = @snd (Uint128) (Uint128)
let fstMatch = @fst (ByStr20) (Uint128)
let sndMatch = @snd (ByStr20) (Uint128)

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let isValidOrderType =
    fun (orderType: Uint32) =>
        let isBuy = builtin eq orderType buyOrderCode in
        let isSell = builtin eq orderType sellOrderCode in
        orb isBuy isSell

let createOrderId =
    fun (tokenAddress: ByStr20) =>
    fun (orderType: Uint32) =>
    fun (price: Uint128) =>
        let hTokenAddress = builtin sha256hash tokenAddress in
        let hOrderType = builtin sha256hash orderType in
        let hPrice = builtin sha256hash price in
        let concatMap = Emp ByStr32 ByStr32 in
        let concatMap = builtin put concatMap hTokenAddress hOrderType in
        let concatMap = builtin put concatMap hPrice hPrice in
        let orderId = builtin sha256hash concatMap in
        orderId

(* Find the order ID of an opposing order type *)
let createOppositeOrderId =
    fun (tokenAddress: ByStr20) =>
    fun (orderType: Uint32) =>
    fun (price: Uint128) =>
        let isSell = builtin eq orderType sellOrderCode in
        let oppOrderType =
            match isSell with
            | True =>
                buyOrderCode
            | False =>
                sellOrderCode
            end
        in
        createOrderId tokenAddress oppOrderType price

(* Sell orders means they are exchanging tokens for ZIL *)
let sellOrdersToMessages =
    fun (matchedOrders: List ((Pair (ByStr20) (Uint128)))) =>
        let toMessage =
            fun (pair: Pair (ByStr20) (Uint128)) =>
                let recipient = fstMatch pair in
                let amount = sndMatch pair in
                let msg = { _tag: ""; _recipient: recipient;
                    _amount: amount; code: orderFilledCode } in 
                msg
        in
        let mapper = @list_map (Pair (ByStr20) (Uint128)) Message in
        let msgs = mapper toMessage matchedOrders in
        msgs

(* Buy orders means they are exchanging ZIL for tokens *)
let buyOrdersToMessages =
    fun (contractAddress: ByStr20) =>
    fun (tokenAddress: ByStr20) =>
    fun (matchedOrders: List ((Pair (ByStr20) (Uint128)))) =>
        let toMessage =
            fun (pair: Pair (ByStr20) (Uint128)) =>
                let recipient = fstMatch pair in
                let amount = sndMatch pair in
                let msg = { _tag: "Transfer"; _recipient: tokenAddress;
                    _amount: zero; from: contractAddress;
                    to: tokenAddress; tokens: amount } in 
                msg
        in
        let mapper = @list_map (Pair (ByStr20) (Uint128)) Message in
        let msgs = mapper toMessage matchedOrders in
        msgs

(*msg = { _tag: "TransferFrom"; _recipient: tokenAddress;*)
(*                        _amount: zero; code: orderMadeCode; from: _sender;*)
(*                        to: thisContractAddress; tokens: totalAmount };*)

(* contract source *)
contract ZEX
(contractOwner: ByStr20)

(* This needs to be added as an input because the contract doesn't know its own address *)
field zexContractAddress: Option ByStr20 = None {ByStr20}

(* Map(orderId => Map(price => List ( Pair(userAddress, amount)) ) *)
field matchedOrders: Map ByStr32 (List ((Pair (ByStr20) (Uint128)))) =
    Emp ByStr32 (List ((Pair (ByStr20) (Uint128))))

(* Map(tokenAddress => Map(orderId => Pair(orderAmount, matchedOrderAmount)) ) *)
field orderbook: Map ByStr20 (Map ByStr32 (Pair (Uint128) (Uint128))) =
    Emp ByStr20 (Map ByStr32 (Pair (Uint128) (Uint128)))

(* Map(orderId => userAddress *)
field orderToUser: Map ByStr32 ByStr20 =
    Emp ByStr32 ByStr20

(* Takes the contract address from the input *)
(* Accepts any amount of funds in ZIL to pay for inter-contract callas *)
transition initContract(thisContractAddress: ByStr20)
    isOwner = builtin eq contractOwner _sender;
    match isOwner with
    | False =>
        msg = { _tag: ""; _recipient: _sender;
            _amount: zero; code: ownerOnlyCode };
        msgs = one_msg msg;
        send msgs
    | True =>
        contractAddress <- zexContractAddress;
        
        match contractAddress with
        | None =>
            someAddress = Some {ByStr20} thisContractAddress;
            zexContractAddress := someAddress;
            msg = { _tag: ""; _recipient: _sender;
                _amount: zero; code: initializedContractCode };
            msgs = one_msg msg;
            send msgs
        | Some contractAddress =>
            msg = { _tag: ""; _recipient: _sender;
                _amount: zero; code: canOnlyInitializeOnceCode };
            msgs = one_msg msg;
            send msgs
        end
    end
end

(* Either of 2 things can happen when this transition is called: *)
(* 1. Add to orderBook if no matching price *)
(* 2. Add to matchingOrders if matching price *)
(* 3. If after adding to matchingOrders, and there's leftover,*)
(*    add to orderBook with that price *)
transition makeOrder(
    tokenAddress: ByStr20,  orderType: Uint32,
    amount: Uint128, price: Uint128
)

    isValid = isValidOrderType orderType;
    
    match isValid with
    | False =>
        msg = { _tag: ""; _recipient: _sender;
            _amount: zero; code: invalidOrderTypeCode };
        msgs = one_msg msg;
        send msgs
    | True =>
        thisContractAddress <- zexContractAddress;
        
        match thisContractAddress with
        | None =>
            msg = { _tag: ""; _recipient: contractOwner;
                _amount: zero; code: uninitializedCode };
            msgs = one_msg msg;
            send msgs
        | Some thisContractAddress =>
            
            (* check out the matchOrderAmounts first *)
            book <- orderbook;
            orders = builtin get book tokenAddress;
            
            (* Create a map with the tokenAddress, if not exists *)
            orders =
                match orders with
                | None =>
                    Emp ByStr32 (Pair (Uint128) (Uint128))
                | Some orders =>
                    orders
                end;
            
            oppositeOrderId = createOppositeOrderId tokenAddress orderType price;
            orderId = createOrderId tokenAddress orderType price;
            orderPair = builtin get orders oppositeOrderId;
            isBuyOrder = builtin eq orderType buyOrderCode;
            
            match orderPair with
            (* First case, making liquidity, adding new order *)
            | None =>
                (* Firstly, add to the orderbook *)
                newOrderPair = Pair {(Uint128) (Uint128)} amount zero;
                orders = builtin put orders orderId newOrderPair;
                book = builtin put book tokenAddress orders;
                orderbook := book;
                
                (* If it's a buy order for token, accept ZIL*)
                totalAmount = builtin mul amount price;
                correctAmount = builtin eq _amount totalAmount;
                
                match isBuyOrder with
                | True =>
                    match correctAmount with
                    | False =>
                        msg = { _tag: ""; _recipient: _sender;
                            _amount: zero; code: invalidAmountSentCode };
                        msgs = one_msg msg;
                        send msgs
                    | True =>
                        accept;
                         msg = { _tag: ""; _recipient: _sender;
                            _amount: zero; code: orderMadeCode };
                        msgs = one_msg msg;
                        send msgs
                    end
                | False =>
                    (* If it's a sell, there must already be an approval for token transfer *)
                    (* We have no way of checking the amount approved now *)
                    (* Store the tokens in the contract, as long as the order exists *)
                    
                    (* Make the token transfer happen *)
                    msg = { _tag: "TransferFrom"; _recipient: tokenAddress;
                        _amount: zero; code: orderMadeCode; from: _sender;
                        to: thisContractAddress; tokens: totalAmount };
                    msgs = one_msg msg;
                    send msgs
                end
                
            (* Second case, taking liquidity, increase amount matched *)
            (* Some cases, all matched and add back the leftover to the orderbook *)
            | Some orderPair =>
                
                totalAmount = fstOrder orderPair;
                matchedAmount = sndOrder orderPair;
                newMatchedAmount = builtin add matchedAmount amount;
                
                notFullyMatched = builtin lt newMatchedAmount totalAmount;
                
                match notFullyMatched with
                (* Exceeds or equal the totalAmount *)
                | False =>
                    
                    (* Fully matched remove the order from the orderbook *)
                    fullyMatched = builtin eq newMatchedAmount totalAmount;
                    ordersMatched <- matchedOrders;
                    
                    match fullyMatched with
                    (* Fully matched*)
                    | True =>
                        (* Resolve all outstanding matching orders *)
                        
                        orders = builtin get ordersMatched oppositeOrderId;
                        newPair = Pair {(ByStr20) (Uint128)} _sender amount;
                        
                        match isBuyOrder with
                        | True =>
                            
                            (* Buy orders have a list of matched sell orders *)
                            match orders with
                            | None =>
                                (* This means that this is the only order that fills it *)
                                nil = Nil {(Pair (ByStr20) (Uint128))};
                                l1 = Cons {(Pair (ByStr20) (Uint128))} newPair nil;
                                msgs = sellOrdersToMessages l1;
                                send msgs
                            | Some orders =>
                                l1 = Cons {(Pair (ByStr20) (Uint128))} newPair orders;
                                msgs = sellOrdersToMessages l1;
                                send msgs
                            end
                            
                        | False =>
                            (* Sell orders have a list of matched buy orders *)
                            match orders with
                            | None =>
                                (* This means that this is the only order that fills it *)
                                nil = Nil {(Pair (ByStr20) (Uint128))};
                                l1 = Cons {(Pair (ByStr20) (Uint128))} newPair nil;
                                msgs = buyOrdersToMessages thisContractAddress tokenAddress l1;
                                send msgs
                            | Some orders =>
                                l1 = Cons {(Pair (ByStr20) (Uint128))} newPair orders;
                                msgs = buyOrdersToMessages thisContractAddress tokenAddress l1;
                                send msgs
                            end
                            
                        end
                        
                    (* Over match *)
                    | False =>
                    end
                    
                | True =>
                (* Under match *)
                end
                
            end
        
        end
    end
end
























